---
title: "Challenge_2: Data Transformation(2), Pivot and Date-Time Data"
author: "Muskan Dhar"
description: ""
date: "2/16/2024"
format: 
  html: 
    embed-resources: true
    self-contained-math: true
---

**Make sure you change the author's name.**

## Setup

If you have not installed the following packages, please install them before loading them.

```{r}
library(tidyverse)
library(readxl)
library(haven) #for loading other datafiles (SAS, STATA, SPSS, etc.)
library(stringr) # if you have not installed this package, please install it.
library(lubridate)
```

## Challenge Overview

Building on the lectures in week#3 and week#4, we will continually practice the skills of different transformation functions with Challenge_2. In addition, we will explore the data more by conducting practices with pivoting data and dealing with date-time data.

There will be coding components and writing components. Please read the instructions for each part and complete your challenges.

## Datasets

There are four datasets provided in this challenge. Please download the following dataset files from Google Classroom and save them to a folder within your project working directory (i.e.: "DACSS601_data"). If you don't have a folder to store the datasets, please create one.

-   ESS_5.dta (Part 1) ⭐
-   p5v2018.sav (Part 1)⭐
-   austrlian_data.csv (Part 3)⭐
-   FedFundsRate.csv (Part 4)⭐

Find the `_data` folder, then use the correct R command to read the datasets.

## Part 1. Depending on the data you chose in Challenge#1 (ESS_5 or Polity V), please use that data to complete the following tasks

## **If you are using the ESS_5 Data:**

1.  **Read the dataset and keep the first 39 columns.**

```{r}
#Type your code here
ESS_data <- read_dta("DACSS601_data/ESS_5.dta")[,1:39]
ESS_data
```

2.  **Conduct the following transformation for the data by using mutate() and other related functions :**

    \(1\) Create a new column named "YearOfBirth" using the information in the "age" column.

    \(2\) Create a new column named "adult" using the information in the "age" column.

    \(3\) Recode the "commonlaw" column: if the value is 0, recode it as "non-common-law"; if the value is 1, recode it as "common-law".

    \(4\) Recode the "vote" column: if the value is 3, recode it as 1; if the value is smaller than 3, recode it as 0. Make sure not to recode the NAs.

    \(5\) Move the column "YearOfBirth", "adult," "commonlaw" and "vote" right before the "essround" column (the 2nd column in order).

    \(6\) Answer the question: What is the data type of the "commonlaw" column before and after recoding? And what is the data type of the "vote" column before and after recoding?

```{r}
#Type your code here
#1 Create a new column named "YearOfBirth" using the information in the "age" column.
mutated_data <- mutate(ESS_data, YearOfBirth = 2024 - age)
#2 Create a new column named "adult" using the information in the "age" column.
mutated_data <- mutate(mutated_data, adult = ifelse(age >= 18, "Yes", "No"))
#3 Recode the "commonlaw" column: if the value is 0, recode it as "non-common-law"; if the value is 1, recode it as "common-law".
mutated_data <- mutate(mutated_data,
                      commonlaw = case_when(
                        commonlaw == 0 ~ "non-common-law",
                        commonlaw == 1 ~ "common-law",
                        TRUE ~ as.character(commonlaw) 
                      ))
#4 Recode the "vote" column: if the value is 3, recode it as 1; if the value is smaller than 3, recode it as 0. Make sure not to recode the NAs.
mutated_data <- mutate(mutated_data,
                       vote = ifelse(is.na(vote), NA, ifelse(vote == 3, 1, ifelse(vote < 3, 0, vote))))

#5 Move the column "YearOfBirth", "adult," "commonlaw" and "vote" right before the "essround" column (the 2nd column in order).
mutated_data <- mutated_data %>%
  select(idno, essround, YearOfBirth, adult, commonlaw, vote, everything())

#6 Answer the question: What is the data type of the "commonlaw" column before and after recoding? And what is the data type of the "vote" column before and after recoding? 

print("Datatype of commonlaw column before recoding")
print(class(ESS_data$commonlaw))

print("Datatype of commonlaw column after recoding")
print(class(mutated_data$commonlaw))

print("Datatype of vote column before recoding")
print(class(ESS_data$vote))

print("Datatype of vote column after recoding")
print(class(mutated_data$vote))


head(mutated_data)
```

## **If you are using the Polity V Data:**

1.  **Read the dataset and keep the first 11 columns.**

```{r}
#Type your code here
```

2.  **Conduct the following transformation for the data by using mutate() and other related functions :**

    \(1\) Create a new column named "North America" using the information in the "country" column. Note: "United States," "Mexico," or "Canada" are the countries in North America. In the new "North America" column, if a country is one of the above three countries, it should be coded as 1, otherwise as 0.

    \(2\) Recode the "democ" column: if the value is 10, recode it as "Well-Functioning Democracy"; if the value is greater than 0 and smaller than 10, recode it as "Either-Autocracy-or-Democracy"; if the value is 0, recode it as "Non-democracy"; if the value is one of the following negative integers (-88, -77, and -66), recode it as "Special-Cases."

    \(3\) Move the column "North America" and "democ" right before the "year" column (the 6th column in order).

    \(4\) Answer the question: What is the data type of the "North America" column? What is the data type of the "democ" column before and after recoding?

```{r}
#Type your code here
```

## Part 2. Generate your own Data

1.  **Generate an untidy data that includes 10 rows and 10 columns. In this dataset, column names are not names of variables but a value of a variable.**

    \*Note: do not ask ChatGPT to generate a dataframe for you. I have already checked the possible questions and answers generated by AI.

```{r}
#Type your code here

#this dataset represents the weights of the students in pounds from ages 15 to 23

student_names <- c("Emily", "David", "Micheal", "Samantha", "Ashley", "Daniel", "Olivia", "Ethan", "Isabella", "Christopher")
students_untidy_data <- data.frame(StudentNames = student_names)
age <- c("15", "16", "17", "18", "19", "20", "21", "22", "23")
students_untidy_data[, age] <- NA
students_untidy_data[1, 2:10] <- c(110, 108, 107, 112, 108, 106, 104, 103, 100)
students_untidy_data[2, 2:10] <- c(105, 108, 106, 105, 103, 100, 98, 95, 93)
students_untidy_data[3, 2:10] <- c(118, 117, 115, 113, 110, 108, 106, 104, 102)
students_untidy_data[4, 2:10] <- c(125, 123, 121, 118, 115, 113, 111, 108, 106)
students_untidy_data[5, 2:10] <- c(140, 137, 135, 132, 130, 128, 125, 122, 120)
students_untidy_data[6, 2:10] <- c(155, 152, 149, 147, 145, 142, 140, 137, 135)
students_untidy_data[7, 2:10] <- c(165, 162, 160, 158, 155, 152, 150, 147, 145)
students_untidy_data[8, 2:10] <- c(170, 168, 165, 163, 160, 157, 155, 152, 150)
students_untidy_data[9, 2:10] <- c(180, 178, 176, 173, 170, 168, 165, 163, 160)
students_untidy_data[10, 2:10] <- c(195, 192, 190, 188, 185, 182, 180, 178, 175)


students_untidy_data
```

2.  **Use the correct pivot command to convert the data to tidy data.**

```{r}
#Type your code here
students_untidy_data <- students_untidy_data %>%
  pivot_longer(cols = -StudentNames, names_to = "Age", values_to = "Weight")
students_untidy_data
```

3.  **Generate an untidy data that includes 10 rows and 5 columns. In this dataset, an observation is scattered across multiple rows.**

```{r}
#Type your code here

studentnames <- c("Emily", "Emily", "David", "David", "Micheal", "Micheal", "Samantha", "Samantha", "Ashley", "Ashley")
cols_names <- c("Weight", "Height", "BMI","Age")
students_untidy_data2 <- data.frame(students = studentnames)
students_untidy_data2[, cols_names] <- NA
students_untidy_data2[1, 2:5] <- c(150, 5.2, 20, 15)
students_untidy_data2[2, 2:5] <- c(120, 6, 21, 16)
students_untidy_data2[3, 2:5] <- c(118, 5.5, 19.5, 15)
students_untidy_data2[4, 2:5] <- c(167, 5.8, 21.5, 16)
students_untidy_data2[5, 2:5] <- c(220, 6, 22, 15)
students_untidy_data2[6, 2:5] <- c(157, 6.2, 22.6, 16)
students_untidy_data2[7, 2:5] <- c(145, 5.4, 24, 15)
students_untidy_data2[8, 2:5] <- c(187,5.8, 24.6, 16)
students_untidy_data2[9, 2:5] <- c(170, 5.9, 27, 15)
students_untidy_data2[10, 2:5] <- c(192, 6, 27.2, 16)

students_untidy_data2


```

3.  **Use the correct pivot command to convert the data to tidy data.**

```{r}
#Type your code here

students_untidy_data2 <- students_untidy_data2 |>
  pivot_wider(
    names_from = Age,
    values_from = c(Weight, Height, BMI),
  )

students_untidy_data2

```

## Part 3. The Australian Data

This is another tabular data source published by the [Australian Bureau of Statistics](https://www.abs.gov.au/) that requires a decent amount of cleaning. In 2017, Australia conducted a postal survey to gauge citizens' opinions towards same sex marriage: "Should the law be changed to allow same-sex couples to marry?" All Australian citizens are required to vote in elections, so citizens could respond in one of four ways: vote yes, vote no, vote in an unclear way (illegible), or fail to vote. (See the "Explanatory Notes" sheet for more details.)

I have already cleaned up the data for you and you can directly import it. We will come back to clean and process the original "messy" data after we learn some string functions in the later weeks.

1.  **Read the dataset "australian_data.csv":**

```{r}
#Type your code here
aus_data <- read.csv("DACSS601_data/australian_data.csv")
aus_data

```

-   **Data Description: Please use the necessary commands and codes and briefly describe this data with a short writing paragraph answering the following questions.**

    ```{r}
    #Type your code here
    dim(aus_data)
    
    ```

    \(1\) What is the dimension of the data (# of rows and columns)?<br>
    The above data has 150 rows and 7 columns. 

    \(2\) What do the rows and columns mean in this data?<br>
    The rows here represent a new district while the columns here represent data related to that district like the number of people who answered Yes/No/Ineligible/No response to the question "Should the law be changed to allow same-sex couples to marry?" in that district. 
    

-   **Data Transformation: use necessary commands and codes and answer the following questions.**

    ```{r}
    #Type your code here
    aus_data_long <- pivot_longer(aus_data, 
                          cols = c(`Yes`, `No`, `Illegible`, `No.Response`),
                          names_to = "Response_Type", 
                          values_to = "Count")
    
    head(aus_data_long)
    
    ```

    \(1\) Reshape the dataset to longer format

    \(2\) How many districts and divisions are in the data?
    
    ```{r}
    
  total_unique_districts <- nrow(distinct(aus_data_long, District)) 
  print(total_unique_districts)
  
  total_unique_divisions <- nrow(distinct(aus_data_long, Division)) 
  print(total_unique_divisions)
    ```
  
    Number of districts are 150 <br> 
    Number of divisions are 8

    \(3\) Use mutate() to create a new column "district turnout(%)". This column should be the voting turnout in a given district, or the proportion of people cast votes (yes, no and illegible) in the total population of a district.
    ```{r}
    
aus_data_long <- aus_data_long |>
  group_by(District) |>
    mutate(`district turnout(%)` = sum(Count[Response_Type %in% c("Yes", "No", "Illegible")]) /sum(Count[Response_Type %in% c("Yes", "No", "Illegible", 'No Response')]) * 100) %>%
  ungroup()
    ```

    \(4\) please use summarise() to estimate the following questions:

    -   In total, how many people support same-sex marriage in Australia, and how many people oppose it?<br>
    Total 7817247 people support same sex marriage.<br>
    Total 4873987 people oppose same sex marriage.
    
    

    -   Which *district* has ***most people*** supporting the policy, and how many?
    Canberra(d) is the most supporting district with 89590 people supporting same sex marriage. 
    

    -   Which *division* has the highest approval rate (% of "yes" in the total casted votes)? And what is the average approval rate at the *division level?* <br> 
    Australian Capital Territory Divisions has the highest approval rate. Average approval rate at the division level is 63.3.
    

        -   Hint: Do NOT take the average of the district approval rate. Each district has a different number of population. The raw approval rate at the district level is not weighted by its population.

    ```{r}
    #Type your code here
  total_people_supporting <- aus_data_long  |>
  filter(Response_Type == "Yes")  |>
  summarise(total_people_supporting = sum(Count))
  print(total_people_supporting)
  
  total_people_opposing <- aus_data_long  |>
  filter(Response_Type == "No")  |>
  summarise(total_people_opposing = sum(Count))
  
    print(total_people_opposing)
    
most_supporting_district <- aus_data_long |>
  filter(Response_Type == "Yes") |>
  group_by(District) |>
  summarise(total_dis = sum(Count)) |>
  arrange(desc(total_dis))
most_supporting_district<- most_supporting_district[1,]
print(most_supporting_district)
  


total_approval_rates <- aus_data_long |>
  filter(Response_Type %in% c("Yes", "No","Illegible")) |>
  group_by(Division) |>
  summarise(tv = sum(Count),
            ty = sum(Count[Response_Type == "Yes"]),
            ar = ty / tv * 100,
            ) |>
  arrange(desc(ar))

highest_approval_rates<- total_approval_rates[1,] 
average_rates <- total_approval_rates |>
  summarise(average_rates = mean(ar))
print(highest_approval_rates)

print(average_rates)
    
    ```

## Part 4. The Marco-economic Data

This data set runs from July 1954 to March 2017, and includes daily macroeconomic indicators related to the *effective federal funds rate* - or [the interest rate at which banks lend money to each other](https://en.wikipedia.org/wiki/Federal_funds_rate) in order to meet mandated reserve requirements.

1.  **Read the dataset "FedFundsRate.csv":**

```{r}
#Type your code here
fedfunds_Data <- read.csv("DACSS601_data/FedFundsRate.csv", check.names = FALSE)
fedfunds_Data
```

2.  **Data Description: Please use the necessary commands and codes and briefly describe this data with a short writing paragraph answering the following questions.**

    ```{r}
    #Type your code here
    dim(fedfunds_Data)
    ```

    \(1\) What is the dimension of the data (# of rows and columns)?<br> 
    The above data has 904 rows and 10 columns. 

    \(2\) What do the rows and columns mean in this data?<br>
    The rows represent daily macroeconomic indicators that are related to the effective federal funds rate. The columns represent individual variables like Year, Month, Day and other macroeconomic indicators. 
    

    \(3\) What is the unit of observation? In other words, what does each case mean in this data?<br>
    The unit of observation are the rows representing the different macroeconomic factors in a particular year, month and day that are related to the federal fund rate in that particular point in time. 

3.  **Generating a date column:**

    Notice that the year, month, and day are three different columns. We will first have to use a string function called "str_c()" from the "stringr" library to combine these three columns into one "date" column. Please delete the \# in the following code chunk.

    ```{r}
fedfunds_Data <-mutate(fedfunds_Data, date = str_c(Year, Month, Day, sep="-"))

fedfunds_Data <- select(fedfunds_Data, date,everything())

 head(fedfunds_Data)
    ```

4.  **Move the new created "date" column to the beginning as the first column of the data.**

5.  **What is the data type of the new "date" column?**

    ```{r}
    #Type your code here
print(class(fedfunds_Data$date))

    ```

6.  **Transform the "date" column to a \<date\> data.**

    ```{r}
    #Type your code here
fedfunds_Data <- mutate(fedfunds_Data, date = make_date(month = Month,day = Day,year = Year))
print(class(fedfunds_Data$date))
    
    ```

7.  **Conduct following statistics:**

    ```{r}
    #Type your code here
fedfunds_Data <-filter(fedfunds_Data, !is.na(`Unemployment Rate`))
max_rate <- max(fedfunds_Data$`Unemployment Rate`)
filtered_rows_max <- filter(fedfunds_Data, `Unemployment Rate` == max_rate)
print("Dates where we find the highest unemployment rate are")
print(filtered_rows_max$date)

min_rate <- min(fedfunds_Data$`Unemployment Rate`)
filtered_rows_min <- filter(fedfunds_Data, `Unemployment Rate` == min_rate)
print("Dates where we find the lowest unemployment rate are")
print(filtered_rows_min$date)
    
    
    
    ```

    \(1\) On which *date* has the highest unemployment rate? and the lowest? <br> 
   Dates with highest unemployment rates: "1982-11-01" "1982-12-01" <br>
   Dates with lowest unemployment rates: "1968-09-01" "1968-10-01" "1968-11-01" "1968-12-01" "1969-01-01" "1969-02-01" "1969-03-01" "1969-04-01" "1969-05-01"

    \(2\) (Optional) Which *decade* has the highest average unemployment rate? <br>
    

    Here is a template for you to create a decade column to allow you to group the data by decade. You can use it for the optional question in Challenge#1:

    ```{r}
    #fed_rates <- fed_rates |>
    #  mutate(Decade = cut(Year, breaks = seq(1954, 2017, by = 10), labels = format(seq(1954, 2017, by = 10), format = "%Y")))


    ##Note: the cut() a baseR function that we don't generally use. Basically, it allows us divides the range of Year into intervals and codes the values in Year according to which interval (1954 and 2017) they fall; the break argument specifies how we segment the sequence of Year (by a decade)
    ```
